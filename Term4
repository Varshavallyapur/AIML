import numpy as np


def sigmoid(x):
    return 1 / (1 + np.exp(-x))


def sigmoid_derivative(x):
    return x * (1 - x)


inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
expected_output = np.array([[0], [1], [1], [0]])

epochs = int(input("Enter the number of epochs : "))
learning_rate = float(input("Enter the learning rate : "))

hidden_weights = np.array([list(map(float, input(f"Hidden weights W1{_+1} and W2{_+1} : ").split())) for _ in range(2)])
W11, W21 = map(float, input(f"Output weights W11 and W21 : ").split())
output_weights = np.array([[W11], [W21]])

print("Initial hidden weights : ", end='')
print(*hidden_weights)
print("Initial output weights : ", end='')
print(*output_weights)

for _ in range(epochs):
    hidden_layer_activation = np.dot(inputs, hidden_weights)
    hidden_layer_output = sigmoid(hidden_layer_activation)

    output_layer_activation = np.dot(hidden_layer_output, output_weights)
    predicted_output = sigmoid(output_layer_activation)

    error = expected_output - predicted_output
    d_predicted_output = error * sigmoid_derivative(predicted_output)

    error_hidden_layer = d_predicted_output.dot(output_weights.T)
    d_hidden_layer = error_hidden_layer * sigmoid_derivative(hidden_layer_output)

    output_weights += hidden_layer_output.T.dot(d_predicted_output) * learning_rate
    hidden_weights += inputs.T.dot(d_hidden_layer) * learning_rate
else:
    print("Final hidden weights   :", *hidden_weights)
    print("Final output weights   :", *output_weights)
    print(f"\nOutput from neural network after {epochs} epochs:", *predicted_output)
